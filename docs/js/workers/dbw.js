const e={name:"rminder",version:1,storeNames:["tasks"]};const t={my_day:"My day",important:"Important"};function s(){console.log("openDb ...");const t=indexedDB.open(e.name,e.version);t.onsuccess=()=>{e.db=t.result;console.log("openDb DONE");o();postMessage({type:"opened",message:"DB opened"});l()};t.onerror=e=>{console.error("openDb:",e.target.error)};t.onblocked=e=>{console.error("openDb: Please close all other tabs with the App open",e.target.error)};t.onupgradeneeded=()=>{console.log("openDb.onupgradeneeded");e.db=t.result;const s=e.db.createObjectStore(e.storeNames[0],{keyPath:"id",autoIncrement:true});s.createIndex("title","title",{unique:false});s.createIndex("important","important",{unique:false});s.createIndex("my_day","my_day",{unique:false});s.createIndex("completed","completed",{unique:false});s.createIndex("note","note",{unique:false});s.createIndex("creation_date","creation_date",{unique:false});o()}}function a(){e.db.close()}function o(){e.db.onversionchange=t=>{e.db.close();console.log("openDb: A new version of this page is ready. Please reload or close this tab!",t)}}function n(t,s){return e.db.transaction(t,s).objectStore(t)}function r(t,s,a){const o={title:t,creation_date:s};const r=n(e.storeNames[0],"readwrite");let d;try{if(a==="my_day"){o.my_day=true}if(a==="important"){o.important=true}d=r.add(o)}catch(e){if(e.name=="DataCloneError"){postMessage({type:"failure",message:"This engine doesn't know how to clone a Blob, use Firefox"})}throw e}d.onsuccess=()=>{postMessage({type:"success",message:"addTask: successful"});l(r,a)};d.onerror=()=>{postMessage({type:"failure",message:`addTask: error -> ${d.error}`})}}function d(t,s){const a=n(e.storeNames[0],"readwrite");a.openCursor().onsuccess=e=>{const o=e.target.result;if(o){if(o.value.id===t){const e=o.delete();e.onsuccess=()=>{postMessage({type:"success",message:`Task(${t}): deleted`});postMessage({type:"hideDetails"})}}o.continue()}else{l(a,s)}}}function c(t){const s=n(e.storeNames[0],"readonly");s.openCursor().onsuccess=e=>{const s=e.target.result;if(s){if(s.value.id===t){postMessage({type:"details",key:s.key,value:s.value})}s.continue()}}}function i(t,s,a,o){const r=n(e.storeNames[0],"readwrite");r.openCursor().onsuccess=e=>{const n=e.target.result;if(n){const e=!a||n.value[s]!==a;if(n.value.id===t&&e){const e=n.value;e[s]=a||!e[s];const o=n.update(e);o.onsuccess=()=>{postMessage({type:"success",message:`Task(${t}): ${s} = ${e[s]}`})}}n.continue()}else{l(r,o)}}}function l(s,a){if(typeof s=="undefined"){s=n(e.storeNames[0],"readonly")}postMessage({type:"clear",message:"Clear"});s.getAll().onsuccess=e=>{let s=e.target.result;if(a!=="tasks"){s=s.filter((e=>e[a]));postMessage({type:"tasks",value:e.target.result,list:{title:t[a],name:a,value:s}})}else{postMessage({type:"tasks",value:e.target.result})}}}onmessage=e=>{const{type:t}=e.data;switch(t){case"start":s();break;case"close":a();break;case"addTask":r(e.data.title,e.data.creationDate,e.data.list);break;case"removeTask":d(e.data.id,e.data.list);break;case"renameTask":i(e.data.id,"title",e.data.title,e.data.list);break;case"showDetails":c(e.data.id);break;case"importantTask":i(e.data.id,"important",undefined,e.data.list);break;case"myDayTask":i(e.data.id,"my_day",undefined,e.data.list);break;case"noteTask":i(e.data.id,"note",e.data.note,e.data.list);break;case"completedTask":i(e.data.id,"completed",undefined,e.data.list);break;case"display":case"list":l(undefined,e.data.list);break;default:postMessage({type:t});break}};