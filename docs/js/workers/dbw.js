const e={name:"rminder",version:1,storeNames:["tasks"]};const s={my_day:"My day",important:"Important"};function t(){console.log("openDb ...");const s=indexedDB.open(e.name,e.version);s.onsuccess=()=>{e.db=s.result;console.log("openDb DONE");o();postMessage({type:"opened",message:"DB opened"});l()};s.onerror=e=>{console.error("openDb:",e.target.error)};s.onblocked=e=>{console.error("openDb: Please close all other tabs with the App open",e.target.error)};s.onupgradeneeded=()=>{console.log("openDb.onupgradeneeded");e.db=s.result;const t=e.db.createObjectStore(e.storeNames[0],{keyPath:"id",autoIncrement:true});t.createIndex("title","title",{unique:false});t.createIndex("important","important",{unique:false});t.createIndex("my_day","my_day",{unique:false});t.createIndex("completed","completed",{unique:false});t.createIndex("note","note",{unique:false});t.createIndex("creation_date","creation_date",{unique:false});o()}}function a(){e.db.close()}function o(){e.db.onversionchange=s=>{e.db.close();console.log("openDb: A new version of this page is ready. Please reload or close this tab!",s)}}function n(s,t){return e.db.transaction(s,t).objectStore(s)}function r(s,t,a){const o={title:s,creation_date:t};const r=n(e.storeNames[0],"readwrite");let c;try{if(a==="my_day"){o.my_day=true}if(a==="important"){o.important=true}c=r.add(o)}catch(e){if(e.name=="DataCloneError"){postMessage({type:"failure",message:"This engine doesn't know how to clone a Blob, use Firefox"})}throw e}c.onsuccess=()=>{postMessage({type:"success",message:"addTask: successful"});l(r,a)};c.onerror=()=>{postMessage({type:"failure",message:`addTask: error -> ${c.error}`})}}function c(s){const t=n(e.storeNames[0],"readwrite");t.openCursor().onsuccess=e=>{const a=e.target.result;if(a){if(a.value.id===s){const e=a.delete();e.onsuccess=()=>{postMessage({type:"success",message:`Task(${s}): deleted`});postMessage({type:"hideDetails"})}}a.continue()}else{l(t)}}}function d(s){const t=n(e.storeNames[0],"readonly");t.openCursor().onsuccess=e=>{const t=e.target.result;if(t){if(t.value.id===s){postMessage({type:"details",key:t.key,value:t.value})}t.continue()}}}function i(s,t,a){const o=n(e.storeNames[0],"readwrite");o.openCursor().onsuccess=e=>{const n=e.target.result;if(n){const e=!a||n.value[t]!==a;if(n.value.id===s&&e){const e=n.value;e[t]=a||!e[t];const o=n.update(e);o.onsuccess=()=>{postMessage({type:"success",message:`Task(${s}): ${t} = ${e[t]}`})}}n.continue()}else{l(o)}}}function l(t,a){if(typeof t=="undefined"){t=n(e.storeNames[0],"readonly")}postMessage({type:"clear",message:"Clear"});t.getAll().onsuccess=e=>{let t=e.target.result;if(a!=="tasks"){t=t.filter((e=>e[a]));postMessage({type:"tasks",value:e.target.result,list:{title:s[a],name:a,value:t}})}else{postMessage({type:"tasks",value:e.target.result})}}}onmessage=e=>{const{type:s}=e.data;switch(s){case"start":t();break;case"close":a();break;case"addTask":r(e.data.title,e.data.creationDate,e.data.list);break;case"removeTask":c(e.data.id);break;case"renameTask":i(e.data.id,"title",e.data.title);break;case"showDetails":d(e.data.id);break;case"importantTask":i(e.data.id,"important");break;case"myDayTask":i(e.data.id,"my_day");break;case"noteTask":i(e.data.id,"note",e.data.note);break;case"completedTask":i(e.data.id,"completed");break;case"display":case"list":l(undefined,e.data.list);break;default:postMessage({type:s});break}};