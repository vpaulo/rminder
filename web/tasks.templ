package web

import (
    "rminder/internal/app/database"
    "strconv"
    "strings"
    "rminder/web/components"
	"rminder/internal/app/user"
)

templ Tasks(lists []*database.List, multiList []*database.List, persistence *database.Persistence, user *user.User) {
	@App(user) {
	    <rm-tasks-app>
			<!-- left colunm -->
			@components.Sidebar(lists, persistence)
            <!-- center column -->
            <div class="main" role="main">
            	if persistence.ListId == 0 {
             		@components.LandingScreen()
             	} else {
              		@PersistedListContent(lists, multiList, persistence)
              	}
            </div>
            <!-- right colunm -->
            <aside class="details"></aside>
		</rm-tasks-app>
	}
}

templ TaskList(tasks []*database.Task, selectedtask int) {
  <ul class="tasks__list">
  for _, task := range tasks {
    @Task(task, selectedtask)
  }
  </ul>
}

templ TaskCompletedElem(task *database.Task) {
	<span
	   class={ templ.KV("completed", task.Completed), "completed-ckeck" }
	   title="Set it as complete"
	   hx-put={ "/v0/tasks/" + strconv.Itoa(task.ID) + "/completed" }
	   hx-trigger="click"
	   hx-swap="outerHTML"
	   hx-target={ ".tasks__list > li[data-id='" + strconv.Itoa(task.ID) + "'] .completed-ckeck" }
	></span>
}

templ TaskImportantElem(task *database.Task) {
	<span
	   class={ templ.KV("important", task.Important), "importance-check" }
	   title="Set it as important"
	   hx-put={ "/v0/tasks/" + strconv.Itoa(task.ID) + "/important" }
	   hx-trigger="click"
	   hx-swap="outerHTML"
	   hx-target={ ".tasks__list > li[data-id='" + strconv.Itoa(task.ID) + "'] .importance-check" }
	></span>
}

templ Task(task *database.Task, selectedtask int) {
	<li
		data-id={ strconv.Itoa(task.ID) }
		hx-get="/v0/lists/all"
		hx-target=".lists__container"
		hx-trigger="click delay:20ms"
	>
		@TaskCompletedElem(task)
	    <label
	      class="show-details"
	      hx-get={ "/v0/tasks/" + strconv.Itoa(task.ID) }
	      hx-trigger="change"
	      hx-target=".details"
	    >
	      <span>{ task.Title }</span>
	      if selectedtask == task.ID {
	      	<input class="hidden" type="radio" name="task-detail" value={ strconv.Itoa(task.ID) } checked/>
	      } else {
	     	<input class="hidden" type="radio" name="task-detail" value={ strconv.Itoa(task.ID) }/>
	      }
	    </label>
	    <span>{ strings.Repeat("!", task.Priority) }</span>
	    @TaskImportantElem(task)
  </li>
}

templ PersistedListContent(lists []*database.List, multiList []*database.List, persistence *database.Persistence) {
	for _, list := range lists {
	    if list.ID == persistence.ListId {
			if list.FilterBy == "" {
				@ListsContent(list, persistence, false)
			} else {
				@MultiListContent(multiList, list.Name, persistence)
			}
	    }
 	}
}

templ MultiListContent(lists []*database.List, title string, persistence *database.Persistence) {
	if len(lists) == 0 {
		@components.NoResultsScreen()
	} else {
		<div>
			<div class="search-toolbar">
		      	<span class="search-title">{ title }</span>
		   	</div>
		for _, list := range lists {
			if len(list.Tasks) > 0 && list.FilterBy == "" {
				@ListsContent(list, persistence, true)
			}
 		}
		</div>
	}
}

templ ListsContent(list *database.List, persistence *database.Persistence, isMultilist bool) {
	<div class={ templ.KV("multi", isMultilist) }>
	    <div class="list-toolbar">
	        <span class="list-title">{ list.Name }</span>
	    </div>
	    <div
	    	class="container"
	    	hx-get="/v0/lists/all"
	     	hx-target=".lists__container"
	     	hx-trigger="submit delay:20ms">
			if !isMultilist {
		        <form
		        	class="add-tasks"
		         	hx-post="/v0/tasks/create"
		          	method="POST"
		           	hx-target=".tasks"
		            hx-on::after-request="this.reset()">
		            <label class="add-task--label" for="task"></label>
		            <input
		                type="text"
		                name="task"
		                id="task"
		                aria-label="Add a task"
		                placeholder="Add a task"
		                required
		                minlength="3"
		                maxlength="255"
		                hx-validate="true"
		            />
		            <input type="text" name="list" class="hidden" value={ strconv.Itoa(list.ID) }/>
		            <button class="add-task" type="submit">Add</button>
		        </form>
			}
	        <div class="tasks">
	            @TaskList(list.Tasks, 0)
	        </div>
	    </div>
	</div>
}
